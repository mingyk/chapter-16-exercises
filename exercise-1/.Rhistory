# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages(ggplot2)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
?sample_n()
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
?sample_n(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
sample_n(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) + geom_hex(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) + geom_hex(mapping = aes(x = carat, y = price))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
install.packages("hexbin")
library(hexbin)
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) + geom_hex(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) + geom_hex(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = state))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) + geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, aes(carat, price)) + geom_point(color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(shape = factor(cut))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(shape = factor(cut))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(shape = cut)
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(aes(shape = cut))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(aes(shape = factor(cut))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(aes(shape = factor(cut))
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(carat, price)) + geom_point(aes(shape = factor(cut)))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(diamonds_sample, aes(cut, carat)) + geom_point(aes(size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(diamonds_sample, aes(cut, carat)) + geom_point(aes(size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price)) + geom_line(color = cut()) + geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price)) + geom_line(color = cut) + geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price)) + geom_line()) + geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price)) + geom_line() + geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price)) + geom_line() + geom_point(color = cut)
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price), color = cut) + geom_line() + geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamonds_sample, aes(carat, price)) + geom_line(aes(color = cut)) + geom_point()
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(diamonds_sample, aes(carat, price)) + geom_smooth(aes(color = cut)) + geom_point()
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(diamonds_sample, aes(carat, price)) + geom_smooth(aes(color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(diamonds_sample, aes(carat, price)) + geom_smooth(aes(color = cut)) + geom_point()
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(diamonds_sample, aes(carat, price)) + geom_smooth(aes(color = cut)) + geom_point() + geom_point(mapping = aes(y = price))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(diamonds) + geom_col(mapping = aes(x = cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(diamonds) + geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(diamonds_sample, aes(carat, price)) + geom_smooth(aes(color = cut, alpha = 0.3)) + geom_point() + geom_point(mapping = aes(y = price))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price)))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(std.error(x))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(stderr(x))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(stderr(mapping))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(stderr(mean(pricex)))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(stderr(mean(prices)))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar()
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(diamonds_sample)
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + ?geom_bar()
?geom_bar(
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + ?geom_bar()
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + ?geom_bar()
?geom_bar()
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(diamonds)
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(diamonds)
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(diamonds))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(diamonds))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(mean(price)))
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(mean(price))
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(price)
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(diamonds$price)
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(diamonds$price) / sqrt(nrow(prices))
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(diamonds$price) / sqrt(nrow(price))
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(diamonds$price) / sqrt(nrow(diamonds$price))
sqrt(nrow(diamonds$price))
sqrt(nrow(diamonds$price))
nrow(diamonds$price)
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
sd(diamonds$price) / sqrt(nrow(diamonds))
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
se <- sd(diamonds$price) / sqrt(nrow(diamonds))
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(se)
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(se))
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- data.frame(diamonds$clarity, mean(diamonds$price), se)
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(clarity_summary)
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(clarity_summary))
clarity_summary
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(diamonds) + geom_col(mapping = aes(x = clarity, y = mean(price))) + geom_bar(mapping = aes(clarity_summary$se))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) + geom_col(mapping = aes(x = price, y = cut, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds) + geom_col(mapping = aes(x = price, y = cut, fill = cut))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds) + geom_col(mapping = aes(x = price, y = cut, fill = cut), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds) + geom_col(mapping = aes(x = price, y = cut, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
gplot(diamonds) + geom_point(cut, clarity)
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(diamonds) + geom_point(cut, clarity)
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(diamonds) + geom_point(mapping = aes(cut, clarity))
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
grid <- ggplot(diamonds) + geom_point(mapping = aes(cut, clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
jitter(grid, factor = 1, amount = NULL)
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
position_jitter(width = NULL, height = NULL, seed = NA)
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(diamonds) + geom_point(mapping = aes(cut, clarity)) + geom_jitter()
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(diamonds) + geom_point(mapping = aes(x = cut, y = clarity)) + geom_jitter()
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = clarity))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity)))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity)))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity, base = exp(1)))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity, base = exp(1)))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity, base = exp(1))))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) + geom_boxplot(mapping = aes(x = cut, y = log(clarity, base = exp(1))))
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamonds) + geom_bin2d(mapping = aes(x = carat, y = price))
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamonds) + geom_bin2d(mapping = aes(x = carat, y = log(price)))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamonds_sample, aes(carat, price)) + geom_point(color = "clarity"#FFFFFF)
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamonds_sample, aes(carat, price)) + geom_point(color = "clarity"#FFFFFF")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamonds_sample, aes(carat, price)) + geom_point(color = "#FFFFFF")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(diamonds) + geom_col(mapping = aes(x = cut, y = cut))
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
ggplot(diamonds) + geom_col(mapping = aes(x = cut, y = cut)) + geom_point()
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave("my-plot.png")
# load relevant libraries
library("httr")
library("jsonlite")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source(apikey.R)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
query <- c(apikey = param, query = movie_name)
endpoint <- "reviews/search.json"
url <- paste0(base_uri, endpoint)
